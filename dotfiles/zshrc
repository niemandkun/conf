# Global variables settings
#export GTK_MODULES=topmenu-gtk-module
export ANDROID_HOME=/opt/android-sdk
export VISUAL=vim

# Lines configured by zsh-newuser-install
HISTFILE=~/.zshhistory
HISTSIZE=1000
SAVEHIST=1000
unsetopt beep
setopt HIST_IGNORE_DUPS
bindkey -e
# End of lines configured by zsh-newuser-install

### Keybindings ###
# create a zkbd compatible hash;
# to add other keys to this hash, see: man 5 terminfo
typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"     ]]  && bindkey  "${key[Home]}"     beginning-of-line
[[ -n "${key[End]}"      ]]  && bindkey  "${key[End]}"      end-of-line
[[ -n "${key[Insert]}"   ]]  && bindkey  "${key[Insert]}"   overwrite-mode
[[ -n "${key[Delete]}"   ]]  && bindkey  "${key[Delete]}"   delete-char
[[ -n "${key[Up]}"       ]]  && bindkey  "${key[Up]}"       up-line-or-history
[[ -n "${key[Down]}"     ]]  && bindkey  "${key[Down]}"     down-line-or-history
[[ -n "${key[Left]}"     ]]  && bindkey  "${key[Left]}"     backward-char
[[ -n "${key[Right]}"    ]]  && bindkey  "${key[Right]}"    forward-char
[[ -n "${key[PageUp]}"   ]]  && bindkey  "${key[PageUp]}"   history-beginning-search-backward
[[ -n "${key[PageDown]}" ]]  && bindkey  "${key[PageDown]}" history-beginning-search-forward

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
    function zle-line-init () {
        printf '%s' "${terminfo[smkx]}"
    }
    function zle-line-finish () {
        printf '%s' "${terminfo[rmkx]}"
    }
    zle -N zle-line-init
    zle -N zle-line-finish
fi

# Preserve terminal state to avoid bugs
ttyctl -f

# The following lines were added by compinstall
zstyle :compinstall filename '/home/niemand/.zshrc'

autoload -Uz compinit colors vcs_info
compinit
colors

# Autocompletion tricks
zstyle ':completion:*' menu select

zstyle ':completion:*:processes' command 'ps -ax'
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;32'
zstyle ':completion:*:*:kill:*' menu yes select
zstyle ':completion:*:kill:*' force-list always

zstyle ':completion:*:processes-names' command 'ps -e -o comm='
zstyle ':completion:*:*:killall:*' menu yes select
zstyle ':completion:*:killall:*' force-list always

# VCS integration
setopt prompt_subst
zstyle ':vcs_info:*' enable git svn
zstyle ':vcs_info:*' formats "%{$reset_color%}at %{$fg[green]%}%b %{$reset_color%}"
precmd () {
    vcs_info
}

### Customize Prompt ###

#PROMPT="%{$fg[green]%}%n@%m:%{$fg[blue]%}%~ $%{$reset_color%} "
#PROMPT="%{$fg[blue]%}%d %{$fg[green]%}> %{$reset_color%}"
#PROMPT="%{$fg[yellow]%}â†’ %{$fg[blue]%}%d%{$reset_color%} "
PROMPT='%{$fg[green]%}%n %{$reset_color%}on %{$fg[yellow]%}%m %{$reset_color%}in %{$fg[blue]%}%~ ${vcs_info_msg_0_}
%{$reset_color%}$ '

RPROMPT='%{$reset_color%}[%{$fg_no_bold[yellow]%}%?%{$reset_color%}]'

### Aliases ###
alias grep='grep --color'
alias ls='ls --color=auto --group-directories-first'
alias lla='ls -lA'
alias la='ls -A'
alias ll='ls -l'
